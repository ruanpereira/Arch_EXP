#To use spacemacs as a dev env for python:

First, install anaconda, by their site: https://www.anaconda.com/download/

After installation, i suggest you to, after reopening your terminal, deactivate the auto enable of the base venv, for organizational purposes.
You can do this with: 

$ conda config --set auto_activate_base False

With conda, in your terminal, activate the base env(if not) with:

$ conda activate

Create a env with the packages you need for your project, and with some packages for upgrades in python development with spacemacs:

$ conda create -n "nameofyourenvirontment, no quotes" packet1 packet2 packet3 flake8 isort yapf python-language-server

After that, open Emacs, and go to the dot files(configuration files) with:

@ SPC f e d (personally, gonna use this notation for keybinds)

In the layers section (dotsspacemacs-configuration-layers), add:

python
(conda :variables conda-anaconda-home "/home/youruser/anaconda3")

Save, close and open Emacs. Wait for aaaaaaaall the download(it takes a minute or more). Close and reopen again, for luck, and thats it.

Create your python file (whatever you want)

After that, activate your env (that you created) with:

@ SPC m n a , and select the name of your virtual env

Do your code bem muito a√≠. (another joke just for brazilians)

And compile with: 

@ SPC m c c 

To assistance and the full command list:

https://develop.spacemacs.org/layers/+lang/conda/README.html
https://develop.spacemacs.org/layers/+lang/python/README.html#management-of-python-versions-and-virtual-environments

#To use git

go to dot-spacemacs file with: 

@ SPC f e d

In the config layer, add git (or uncomment it)

Reload the configs:

@ SPC f e R  (case sensitive)

That's it, you installed. 

Now, for using it. I'm using this video as a reference: https://youtu.be/NDP91RNgT4A

Open the magit (the name of the layer that you just installed) git status buffer with: 

@ SPC g s

You can also use @ M-x, and type the command, but for now i'm not covering this part.

So, on that buffer, you can exit with @ q, or @ C-q (ctrl + q). 

You will see some sections, and they can be opened. To expand the section, hit @ TAB.  

Unstaged changes section, if you are familiar with github, it is self-explanatory. But it is the files that are not staged.

Recent commits, are ... you know.

You can also hit @ TAB in the file, to see the differences in the file. You can hit @ ENTER in any file to navigate to it.

TO commit a file, first we need to stage the files. So, inside the magit git status buffer, hit @ s 

It will change the fiel to another section, the staged ones.

If needed, you can stage just some part of the file. When expanding a file with @ TAB, you can press @ v to enter
on visual mode in spacemacs and select the part that you want. In the end, press @ s to stage. It will stay
both the staged and unstaged files

If you prefer to not commit directly to the master/main branch, you can create/manage your branches. 
To do this, you just press @ b b

To commit, you need to press @ c c
On this new buffer, you can add a main comment on the top part, or
a longer subcomment on the lower part 

To finish the process of commiting, type @ ,,

To undo any staget file etc, select the file and type @ u

You can discart files with @ x

If you are lost, or curious, you can press @ ? to see all the avaliable commands.

To push changes, after you opened the git status buffer:

@ p p, and select the remote that you will push

To pull changes

@ F p, and choose the branch that you will pull

To analyze files that have both upstream and local changes, you can press 

@ e , on the status buffer

Now, you have 3 buffers: the buffer that refers to the file on upstream
another that refers to the local, and another that is the file how it is.

You can navigate with @ n or @ p

To quit from this:

@ q

Ans respond. That will do the merge, and resolve conflicts.

To merge from branches, you can too press @ m













